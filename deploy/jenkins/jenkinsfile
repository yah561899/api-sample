pipeline {
  agent {
    kubernetes {
      yaml """
    apiVersion: v1
    kind: Pod
    spec:
      serviceAccountName: jenkins
      containers:
        - name: ci
          image: docker:dind
          securityContext:
            privileged: true
          tty: true
          resources:
            requests:
              cpu: 1000m
              memory: 2Gi
            limits:
              cpu: 1000m
              memory: 2Gi
"""
    }
  }

  environment {
    REGISTRY         = "docker.io"
    IMAGE_NAME       = "yah561899/sampleapi"
    TAG              = "latest"
    DOCKERFILE_PATH  = "deploy/docker/Dockerfile"

    ARGOCD_SERVER    = "argocd.example.com"
    ARGOCD_APP       = "argocd/sampleapi-app"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        container('ci') {       // ← 切到 ci 容器
          sh "docker build -t ${IMAGE_NAME}:${TAG} -f ${DOCKERFILE_PATH} ."

          withCredentials([
            usernamePassword(
              credentialsId: 'dockerhub-credentials-id',
              usernameVariable: 'DOCKER_USER',
              passwordVariable: 'DOCKER_PASS'
            )
          ]) {
            sh "echo $DOCKER_PASS | docker login ${REGISTRY} -u $DOCKER_USER --password-stdin"
          }

          sh "docker push ${IMAGE_NAME}:${TAG}"
        }
      }
    }

    stage('Notify Argo CD') {
      steps {
        // 这一步不需要用到 ci 容器，直接在 jnlp 上跑也行
        withCredentials([
          usernamePassword(
            credentialsId: 'argocd-credentials-id',
            usernameVariable: 'ARGO_USER',
            passwordVariable: 'ARGO_PASS'
          )
        ]) {
          sh '''
            argocd login ${ARGOCD_SERVER} \
              --username ${ARGO_USER} \
              --password ${ARGO_PASS} \
              --insecure \
              --grpc-web

            argocd app sync ${ARGOCD_APP}
          '''
        }
      }
    }
  }

  post {
    success { echo "✅ Build & push 成功，已触发 Argo CD 同步" }
    failure { echo "❌ Pipeline 失败，请查看日志。" }
  }
}
