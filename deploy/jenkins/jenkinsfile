def getCustomVersion(String versionPrefix) {
  def res = "${versionPrefix}.${env.BUILD_NUMBER}-${env.BRANCH_NAME}"
  res = res.replace('/', '-')
  return res
}

pipeline {
  agent {
    kubernetes {
      yaml """
    apiVersion: v1
    kind: Pod
    spec:
      serviceAccountName: jenkins
      containers:
        - name: ci
          image: docker:dind
          securityContext:
            privileged: true
          tty: true
          resources:
            requests:
              cpu: 1000m
              memory: 2Gi
            limits:
              cpu: 1000m
              memory: 2Gi
        - name: api-client
          image: alpine:3.18
          command:
            - sh
            - -c
            - |
              apk add --no-cache curl sed grep > /dev/null 2>&1
              sleep infinity
          tty: true
"""
    }
  }

  environment {
    REGISTRY         = "docker.io"
    IMAGE_NAME       = "yah561899/sampleapi"
    VERSION_PREFIX   = "1.0"
    VERSION          = getCustomVersion(VERSION_PREFIX)
    DOCKERFILE_PATH  = "deploy/docker/Dockerfile"

    // Argo CD Service in Minikube Cluster
    // Use in-cluster DNS name for the argocd-server service
    ARGOCD_SERVER   = "argocd-server.argocd.svc.cluster.local:443"
    ARGOCD_APP      = "sampleapi-app"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    // stage('Build & Push Docker Image') {
    //   steps {
    //     container('ci') {       // ← 切到 ci 容器
    //       sh "docker build -t ${IMAGE_NAME}:${VERSION} -f ${DOCKERFILE_PATH} ."

    //       withCredentials([
    //         usernamePassword(
    //           credentialsId: 'dockerhub-credentials-id',
    //           usernameVariable: 'DOCKER_USER',
    //           passwordVariable: 'DOCKER_PASS'
    //         )
    //       ]) {
    //         sh "echo $DOCKER_PASS | docker login ${REGISTRY} -u $DOCKER_USER --password-stdin"
    //       }

    //       sh "docker push ${IMAGE_NAME}:${VERSION}"
    //     }
    //   }
    // }

    stage('Notify Argo CD via API') {
      steps {
        container('api-client'){
          withCredentials([usernamePassword(credentialsId: 'argocd-credentials-id', usernameVariable: 'ARGO_USER', passwordVariable: 'ARGO_PASS')]) {
            sh '''
# Authenticate and obtain token
RESPONSE=$(curl -k -s -X POST https://${ARGOCD_SERVER}/api/v1/session \
  -H 'Content-Type: application/json' \
  -d '{"username":"'"$ARGO_USER"'","password":"'"$ARGO_PASS"'"}')
# Print raw response
echo "ArgoCD Auth Response: $RESPONSE"
# Extract token
TOKEN=$(echo "$RESPONSE" | sed -E 's/.*"token":"([^\"]+)".*/\1/')
echo "Extracted Token: $TOKEN"

# Patch Argo CD Helm Application to update image tag via Helm parameter
PATCH_RESPONSE=$(curl -k -s -X PATCH https://${ARGOCD_SERVER}/api/v1/applications/${ARGOCD_APP} \
  -H "Authorization: Bearer $TOKEN" \
  -H 'Content-Type: application/merge-patch+json' \
  -d '{
        "patch": "{\"spec\":{\"source\":{\"helm\":{\"parameters\":[{\"name\":\"image.tag\",\"value\":\"1.0.11-main\"}]}}}}",
        "patchType": "merge"
      }')
echo "Patch Response: $PATCH_RESPONSE"

# Trigger sync for the Argo CD application
SYNC_RESPONSE=$(curl -k -s -X POST https://${ARGOCD_SERVER}/api/v1/applications/${ARGOCD_APP}/sync \
  -H "Authorization: Bearer $TOKEN")
echo "Sync Response: $SYNC_RESPONSE"
            '''
          }
        }
      }
    }
  }

  post {
    success { echo "✅ Build & push 成功，已触发 Argo CD 同步" }
    failure { echo "❌ Pipeline 失败，请查看日志。" }
  }
}
